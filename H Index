Approach1 :Logrithmic solution
Time Complexity : O(nlogn)
Space Complexity :O(1)
class Solution {
    public int hIndex(int[] citations) {
        Arrays.sort(citations); int n=citations.length;
        for(int i=0;i<n;i++){
            int diff=n-i;
            if(citations[i]>=diff) return diff;
        }
        return 0;     
    }
}
Approach 2 : Bucket Sort. Where i can store the no of papers with the citations
Time Complexity :O(n)
Space Complexity :O(1)
class Solution {
    public int hIndex(int[] citations) {
        int n=citations.length;
        int[] buckets=new int[n+1]; // Last index is nth;
        for(int i=0; i<n;i++){
            // fill the number of papers in each bucket
            buckets[Math.min(citations[i],n)]++;
        }
        int sum=0;
        for(int i=buckets.length-1;i>=0;i--){
            sum+=buckets[i];
            if(sum>=i) return i;
        }
        return 0;
        
    }
}

