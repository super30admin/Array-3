Approach 1 : Water level that can be trapped at every building. Intution was water level on any building depends on comparing the min(max left side wall and maxright side wall) of that building???
So that is nothing but water level bound.
Time Complexity : O(n)
Space Complexity : O(n)
class Solution {
    public int trap(int[] height) {
        // Edge Case
        if(height==null || height.length==0) return 0;
        int res=0; int n=height.length;
        int[] mxl=new int[n];
        int[] mxr = new int[n];
        mxl[0]=height[0];
        for (int i=1;i<n;i++){
            mxl[i]=Math.max(mxl[i-1],height[i]);
        }
        mxr[n-1]=height[n-1];
        for(int i=n-2;i>=0;i--){
            mxr[i]=Math.max(mxr[i+1],height[i]);
        }
        int [] water=new int[n];
        for(int i=0;i<n;i++){
            water[i]=Math.min(mxl[i],mxr[i])-height[i];
        }
        // calculating
        for(int i=0;i<n;i++){
            res+=water[i];
        }
        return res;        
    }
    
}

Approach 2 : Inplace with two pointer Approach
Time :O(n)
Space :O(1)
class Solution {
    public int trap(int[] height) {
        // Edge Case
        if(height==null || height.length==0) return 0;
        // Logic 
        int lw=0; int rw=0; int n=height.length;
        int l=0; int r=n-1;int result=0;
        while(l<=r){
            // which side to process
            if(lw<=rw){
                // left side to process
                if(height[l]<=lw){
                    // Trapping on the left side
                    result+=lw-height[l];
                }else{
                    lw=height[l];
                }l++;
            }else{
                // Right hand side to process
                if(height[r]<=rw){
                    // Trapping on the right side
                    result+=rw-height[r];
                }else{
                    rw=height[r];
                }r--;
            }
            
        }
        return result;
        
    }
}
