//TC -o(n)
 //SC-o(1)
    public void rotate(int[] nums, int k) {
        
        if(nums == null || nums.length == 0)
            return;
        int n = nums.length;
        k = k%n;
        
        //reverse whole array
        reverse(nums,0,n-1);
        
        //reverse 0 to k-1 elements
        reverse(nums,0,k-1);
        
        //reverse k+1 to n-1 elements
        reverse(nums,k,n-1);
    }
    
    private void reverse(int[] nums,int i,int j) {
        while(i<j){
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;j--;
        }
    }
}

//left rotation
class Solution {
    //TC -o(n)
    //SC-o(1)
    public void rotate(int[] nums, int k) {
        
        if(nums == null || nums.length == 0)
            return;
        int n = nums.length;
        k = k%n;
        
        //reverse whole array
        reverse(nums,0,n-1);
        
        //reverse 0 to k-1 elements
        reverse(nums,0,n-k-1);
        
        //reverse k+1 to n-1 elements
        reverse(nums,n-k,n-1);
    }
    
    private void reverse(int[] nums,int i,int j) {
        while(i<j){
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;j--;
        }
    }
}